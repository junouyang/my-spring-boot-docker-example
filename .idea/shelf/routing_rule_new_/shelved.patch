Index: echo-service/src/main/java/org/exampledriven/docker/echo/Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- echo-service/src/main/java/org/exampledriven/docker/echo/Application.java	(date 1509400131000)
+++ echo-service/src/main/java/org/exampledriven/docker/echo/Application.java	(revision )
@@ -1,0 +1,0 @@
Index: zuul-server/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul-server/pom.xml	(date 1509400131000)
+++ zuul-server/pom.xml	(revision )
@@ -45,7 +45,30 @@
             <artifactId>spring-cloud-starter-eureka</artifactId>
         </dependency>
 
-    </dependencies>
+        <dependency>
+            <groupId>commons-io</groupId>
+            <artifactId>commons-io</artifactId>
+            <version>2.6</version>
+        </dependency>
+
+        <!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpclient</artifactId>
+            <version>4.5.4</version>
+        </dependency>
+        <!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-commons -->
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-commons</artifactId>
+            <version>1.3.1.RELEASE</version>
+        </dependency>
+        <!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-netflix-core -->
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-netflix-core</artifactId>
+            <version>1.4.2.RELEASE</version>
+        </dependency>    </dependencies>
 
     <dependencyManagement>
         <dependencies>
Index: echo-service/src/main/java/org/exampledriven/docker/echo/rest/RemoteEchoController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- echo-service/src/main/java/org/exampledriven/docker/echo/rest/RemoteEchoController.java	(date 1509400131000)
+++ echo-service/src/main/java/org/exampledriven/docker/echo/rest/RemoteEchoController.java	(revision )
@@ -34,10 +34,12 @@
     public Map<String, HostInfo> getHost(HttpServletRequest request) {
 
         Map result = new HashMap<String, HostInfo>();
-        result.put("local", HostFactory.create(request));
+        result.put("local", HostFactory.create(request, EchoController.hostName, request.getRequestURL().toString()));
 
-        getRemoteHostInfo(result, "http://example_echo-service:9098/echo (Docker swarm service)", restTemplate, "http://example_echo-service:9098/echo");
-        getRemoteHostInfo(result, "http://echo-service:9098/echo (Docker compose DNS entry)", restTemplate, "http://echo-service:9098/echo");
+        getRemoteHostInfo(result, "http://example_echo-service:9099/echo (Docker swarm service)", restTemplate,
+                "http://example_echo-service:9099/echo");
+        getRemoteHostInfo(result, "http://echo-service:9099/echo (Docker compose DNS entry)", restTemplate,
+                "http://echo-service:9098/echo");
         getRemoteHostInfo(result, "http://echo-service/echo (Ribbon+Eureka)", loadBalancedRestTemplate, "http://echo-service/echo");
 
         return result;
\ No newline at end of file
Index: echo-service/src/main/java/org/exampledriven/docker/echo/domain/HostFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- echo-service/src/main/java/org/exampledriven/docker/echo/domain/HostFactory.java	(date 1509400131000)
+++ echo-service/src/main/java/org/exampledriven/docker/echo/domain/HostFactory.java	(revision )
@@ -1,17 +1,16 @@
 package org.exampledriven.docker.echo.domain;
 
+import javax.servlet.http.HttpServletRequest;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 
-import javax.servlet.http.HttpServletRequest;
-
 /**
  * Created by Peter_Szanto on 3/2/2017.
  */
 public class HostFactory {
 
-    public static HostInfo create(HttpServletRequest request) {
-        return new HostInfo(request.getLocalAddr(), request.getLocalPort(), getHostName());
+    public static HostInfo create(HttpServletRequest request, String message, String url) {
+        return new HostInfo(request.getLocalAddr(), request.getLocalPort(), getHostName(), message, url);
     }
 
     private static String getHostName() {
Index: zuul-server/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul-server/src/main/resources/application.yml	(date 1509400131000)
+++ zuul-server/src/main/resources/application.yml	(revision )
@@ -15,6 +15,8 @@
     echo-by-dns:
       path: /echo-service-by-dns/**
       url: http://echo-service:9098
+    controller:
+      path: /controller
 
 spring:
   application:
Index: echo-service/src/main/java/org/exampledriven/docker/echo/rest/EchoController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- echo-service/src/main/java/org/exampledriven/docker/echo/rest/EchoController.java	(date 1509400131000)
+++ echo-service/src/main/java/org/exampledriven/docker/echo/rest/EchoController.java	(revision )
@@ -1,21 +1,23 @@
 package org.exampledriven.docker.echo.rest;
 
-import org.exampledriven.docker.echo.domain.HostInfo;
 import org.exampledriven.docker.echo.domain.HostFactory;
+import org.exampledriven.docker.echo.domain.HostInfo;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
+
 import javax.servlet.http.HttpServletRequest;
 import java.util.HashMap;
 import java.util.Map;
 
 @RestController
 public class EchoController {
+    public static String hostName = "echo 2222";
 
     @RequestMapping(value = "/echo", method = RequestMethod.GET, produces = "application/json")
     public HostInfo getHost(HttpServletRequest request) {
 
-        return HostFactory.create(request);
+        return HostFactory.create(request, hostName, request.getRequestURL().toString());
 
     }
 
@@ -24,7 +26,7 @@
 
         HashMap result = new HashMap<>();
 
-        result.put("host", HostFactory.create(request));
+        result.put("host", HostFactory.create(request, hostName, request.getRequestURL().toString()));
 
         result.put("env", System.getenv());
 
@@ -32,5 +34,11 @@
 
     }
 
+    @RequestMapping(value = "/health-uri", method = RequestMethod.GET, produces = "application/json")
+    public Map getHealth(HttpServletRequest request) {
+        Map result = new HashMap<>();
+        result.put("status", "UP");
+        return result;
+    }
 
 }
\ No newline at end of file
Index: zuul-server/src/main/java/org/exampledriven/zuul/ControllerHARequestHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul-server/src/main/java/org/exampledriven/zuul/ControllerHARequestHelper.java	(revision )
+++ zuul-server/src/main/java/org/exampledriven/zuul/ControllerHARequestHelper.java	(revision )
@@ -0,0 +1,37 @@
+package org.exampledriven.zuul;
+
+import org.springframework.cloud.netflix.zuul.filters.ProxyRequestHelper;
+import org.springframework.util.MultiValueMap;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class ControllerHARequestHelper extends ProxyRequestHelper {
+    private InputStream responseStream;
+    private Map<String, List<String>> headers = new HashMap<>();
+
+    @Override
+    public void setResponse(
+            int status, InputStream responseStream, MultiValueMap<String, String> headers) throws IOException {
+        this.responseStream = responseStream;
+        headers.putAll(this.headers);
+        super.setResponse(status, responseStream, headers);
+    }
+
+    public void addHeader(String name, String... values) {
+        headers.compute(name, (key, valuesToAdd) -> {
+            if (valuesToAdd == null) valuesToAdd = new ArrayList<>();
+            for( String value : values)
+                valuesToAdd.add(value);
+            return valuesToAdd;
+        });
+    }
+
+    public InputStream getResponseStream() {
+        return responseStream;
+    }
+}
Index: zuul-server/src/main/java/org/exampledriven/zuul/RouteFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul-server/src/main/java/org/exampledriven/zuul/RouteFilter.java	(revision )
+++ zuul-server/src/main/java/org/exampledriven/zuul/RouteFilter.java	(revision )
@@ -0,0 +1,106 @@
+package org.exampledriven.zuul;
+
+import com.netflix.zuul.context.RequestContext;
+import org.apache.commons.io.IOUtils;
+import org.apache.http.HttpRequest;
+import org.apache.http.HttpResponse;
+import org.apache.http.ProtocolException;
+import org.apache.http.client.RedirectStrategy;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.protocol.HttpContext;
+import org.springframework.cloud.netflix.zuul.filters.ZuulProperties;
+
+import javax.servlet.http.HttpServletRequest;
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.logging.Logger;
+
+public class RouteFilter extends ControllerSimpleHostRoutingFilter {
+    private ControllerHARequestHelper helper;
+    private static Logger logger = Logger.getLogger(RouteFilter.class.getName());
+
+    public RouteFilter(ControllerHARequestHelper helper, ZuulProperties properties) {
+        super(helper, properties);
+//        redirectStrategy = new RedirectStrategy() {
+//            @Override
+//            public boolean isRedirected(
+//                    HttpRequest httpRequest, HttpResponse httpResponse, HttpContext httpContext)
+//                    throws ProtocolException {
+//                return true;
+//            }
+//
+//            @Override
+//            public HttpUriRequest getRedirect(
+//                    HttpRequest httpRequest, HttpResponse httpResponse, HttpContext httpContext)
+//                    throws ProtocolException {
+//                System.out.println(httpResponse.getAllHeaders());
+//                return null;
+//            }
+//        };
+        this.helper = helper;
+    }
+
+    @Override
+    public String filterType() {
+        return "route";
+    }
+
+    @Override
+    public int filterOrder() {
+        return 0;
+    }
+
+    @Override
+    public boolean shouldFilter() {
+        return true;
+    }
+
+    @Override
+    public Object run() {
+        System.out.println("Inside Route Filter");
+        RequestContext context = RequestContext.getCurrentContext();
+        HttpServletRequest request = context.getRequest();
+        System.out.println("==============" + request.getHeaderNames());
+        System.out.println("==============" + request.getRequestURL());
+        System.out.println("==============" + request.getQueryString());
+        System.out.println("==============" + request.getRequestURI());
+        if (request.getRequestURI().contains("controller")) {
+            try {
+                //                context.setRouteHost(new URL("http://192.168.99" +
+                //                        ".100:9090/api/echo-service/echo"));
+                //                String url = UriComponentsBuilder.fromHttpUrl("http://localhost:9090").path("/api")
+                //                        .path("/echo-service"
+                //                                "/echo")
+                //                                                 .build()
+                //                                                 .toUriString();
+                //                context.set("requestURI", "/api/echo-service/echo");
+                String host = request.getParameter("url");
+                helper.addHeader("location", request.getRequestURL().toString() + request.getQueryString());
+                context.setRouteHost(new URL(host));
+                //                context.setRouteHost(new URL("http://192.168.99.100:9099"));
+                //                context.setRouteHost(new URL("http://0.0.0.0:8080"));
+                String path = request.getParameter("path");
+//                String path = "/echo";
+//                String path = "/controller";
+                if( path != null) {
+                    context.set("requestURI", path);
+                }
+                context.setSendZuulResponse(false);
+                Object result = super.run();
+                try {
+                    String responseBody = IOUtils.toString(this.helper.getResponseStream(), "utf-8");
+                    logger.severe(responseBody);
+                    context.setResponseBody(responseBody);
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+//                helper.setSensitiveHeaders();
+                return result;
+            } catch (MalformedURLException e) {
+                e.printStackTrace();
+            }
+        }
+        return null;
+    }
+}
Index: zuul-server/src/main/java/org/exampledriven/zuul/SpringCloudZuulExampleApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul-server/src/main/java/org/exampledriven/zuul/SpringCloudZuulExampleApplication.java	(date 1509400131000)
+++ zuul-server/src/main/java/org/exampledriven/zuul/SpringCloudZuulExampleApplication.java	(revision )
@@ -3,6 +3,8 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.cloud.netflix.zuul.EnableZuulProxy;
+import org.springframework.cloud.netflix.zuul.filters.ZuulProperties;
+import org.springframework.context.annotation.Bean;
 
 @EnableZuulProxy
 @SpringBootApplication
@@ -11,4 +13,21 @@
 	public static void main(String[] args) {
 		SpringApplication.run(SpringCloudZuulExampleApplication.class, args);
 	}
+
+	@Bean
+	public RouteFilter routeFilter() {
+		ControllerHARequestHelper proxyRequestHelper = new ControllerHARequestHelper();
+		ZuulProperties properties = new ZuulProperties();
+		return new RouteFilter(proxyRequestHelper, properties);
+	}
+
+//	@Bean
+//	public AddResponseHeaderFilter postFilter() {
+//		return new AddResponseHeaderFilter();
+//	}
+
+//	@Bean
+//	public StickSessionRule createStickySessionRule() {
+//		return new StickSessionRule();
+//	}
 }
Index: zuul-server/src/main/java/org/exampledriven/zuul/AddResponseHeaderFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul-server/src/main/java/org/exampledriven/zuul/AddResponseHeaderFilter.java	(revision )
+++ zuul-server/src/main/java/org/exampledriven/zuul/AddResponseHeaderFilter.java	(revision )
@@ -0,0 +1,31 @@
+package org.exampledriven.zuul;
+
+import com.netflix.zuul.ZuulFilter;
+import com.netflix.zuul.context.RequestContext;
+
+import javax.servlet.http.HttpServletResponse;
+import java.util.UUID;
+
+/**
+ * @author Spencer Gibb
+ */
+public class AddResponseHeaderFilter extends ZuulFilter {
+    public String filterType() {
+        return "post";
+    }
+
+    public int filterOrder() {
+        return 999;
+    }
+
+    public boolean shouldFilter() {
+        return true;
+    }
+
+    public Object run() {
+        RequestContext context = RequestContext.getCurrentContext();
+        HttpServletResponse servletResponse = context.getResponse();
+        servletResponse.addHeader("X-Foo", UUID.randomUUID().toString());
+        return null;
+    }
+}
\ No newline at end of file
Index: zuul-server/src/main/java/org/exampledriven/zuul/StickSessionRule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul-server/src/main/java/org/exampledriven/zuul/StickSessionRule.java	(revision )
+++ zuul-server/src/main/java/org/exampledriven/zuul/StickSessionRule.java	(revision )
@@ -0,0 +1,26 @@
+package org.exampledriven.zuul;
+
+import com.netflix.client.config.IClientConfig;
+import com.netflix.loadbalancer.AbstractLoadBalancerRule;
+import com.netflix.loadbalancer.Server;
+
+import java.util.List;
+
+public class StickSessionRule extends AbstractLoadBalancerRule {
+    private int index = 0;
+    @Override
+    public void initWithNiwsConfig(IClientConfig iClientConfig) {
+
+    }
+
+    @Override
+    public Server choose(Object o) {
+        System.out.println("4444444444444 " + o);
+        List<Server> servers = getLoadBalancer().getReachableServers();
+        if (servers != null && servers.size() > 0) {
+            int nextIndex = index++ % servers.size();
+            return servers.get(nextIndex);
+        }
+        return null;
+    }
+}
\ No newline at end of file
Index: echo-service/src/main/java/org/exampledriven/docker/echo/domain/HostInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- echo-service/src/main/java/org/exampledriven/docker/echo/domain/HostInfo.java	(date 1509400131000)
+++ echo-service/src/main/java/org/exampledriven/docker/echo/domain/HostInfo.java	(revision )
@@ -8,14 +8,18 @@
     private String address;
     private int port;
     private String hostName;
+    private String message;
+    private String url;
 
     public HostInfo() {
     }
 
-    public HostInfo(String address, int port, String hostName) {
+    public HostInfo(String address, int port, String hostName, String message, String url) {
         this.address = address;
         this.port = port;
         this.hostName = hostName;
+        this.message = message;
+        this.url = url;
     }
 
     public String getAddress() {
@@ -40,5 +44,21 @@
 
     public void setHostName(String hostName) {
         this.hostName = hostName;
+    }
+
+    public String getMessage() {
+        return message;
+    }
+
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+    public String getUrl() {
+        return url;
+    }
+
+    public void setUrl(String url) {
+        this.url = url;
     }
 }
Index: zuul-server/src/main/java/org/exampledriven/zuul/ControllerSimpleHostRoutingFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul-server/src/main/java/org/exampledriven/zuul/ControllerSimpleHostRoutingFilter.java	(revision )
+++ zuul-server/src/main/java/org/exampledriven/zuul/ControllerSimpleHostRoutingFilter.java	(revision )
@@ -0,0 +1,375 @@
+package org.exampledriven.zuul;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.Timer;
+import java.util.TimerTask;
+
+import javax.annotation.PostConstruct;
+import javax.annotation.PreDestroy;
+import javax.servlet.http.HttpServletRequest;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.http.Header;
+import org.apache.http.HttpHost;
+import org.apache.http.HttpRequest;
+import org.apache.http.HttpResponse;
+import org.apache.http.client.RedirectStrategy;
+import org.apache.http.client.config.CookieSpecs;
+import org.apache.http.client.config.RequestConfig;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.apache.http.client.methods.HttpPatch;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.client.methods.HttpPut;
+import org.apache.http.conn.HttpClientConnectionManager;
+import org.apache.http.entity.ContentType;
+import org.apache.http.entity.InputStreamEntity;
+import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClientBuilder;
+import org.apache.http.message.BasicHeader;
+import org.apache.http.message.BasicHttpEntityEnclosingRequest;
+import org.apache.http.message.BasicHttpRequest;
+import org.springframework.cloud.commons.httpclient.ApacheHttpClientConnectionManagerFactory;
+import org.springframework.cloud.commons.httpclient.ApacheHttpClientFactory;
+import org.springframework.cloud.context.environment.EnvironmentChangeEvent;
+import org.springframework.cloud.netflix.zuul.filters.ProxyRequestHelper;
+import org.springframework.cloud.netflix.zuul.filters.ZuulProperties;
+import org.springframework.cloud.netflix.zuul.filters.ZuulProperties.Host;
+import org.springframework.cloud.netflix.zuul.util.ZuulRuntimeException;
+import org.springframework.context.event.EventListener;
+import org.springframework.util.LinkedMultiValueMap;
+import org.springframework.util.MultiValueMap;
+import org.springframework.util.StringUtils;
+
+import com.netflix.zuul.ZuulFilter;
+import com.netflix.zuul.context.RequestContext;
+
+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.REQUEST_ENTITY_KEY;
+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.ROUTE_TYPE;
+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.SIMPLE_HOST_ROUTING_FILTER_ORDER;
+
+public class ControllerSimpleHostRoutingFilter extends ZuulFilter {
+
+        private static final Log log = LogFactory.getLog(ControllerSimpleHostRoutingFilter.class);
+
+        private final Timer connectionManagerTimer = new Timer(
+                "SimpleHostRoutingFilter.connectionManagerTimer", true);
+
+        private boolean sslHostnameValidationEnabled;
+        private boolean forceOriginalQueryStringEncoding;
+
+        private ProxyRequestHelper helper;
+        private Host hostProperties;
+        private ApacheHttpClientConnectionManagerFactory connectionManagerFactory;
+        private ApacheHttpClientFactory httpClientFactory;
+        private HttpClientConnectionManager connectionManager;
+        protected RedirectStrategy redirectStrategy;
+        private CloseableHttpClient httpClient;
+        private boolean customHttpClient = false;
+
+        @EventListener
+        public void onPropertyChange(EnvironmentChangeEvent event) {
+            if(!customHttpClient) {
+                boolean createNewClient = false;
+
+                for (String key : event.getKeys()) {
+                    if (key.startsWith("zuul.host.")) {
+                        createNewClient = true;
+                        break;
+                    }
+                }
+
+                if (createNewClient) {
+                    try {
+                        ControllerSimpleHostRoutingFilter.this.httpClient.close();
+                    } catch (IOException ex) {
+                        log.error("error closing client", ex);
+                    }
+                    ControllerSimpleHostRoutingFilter.this.httpClient = newClient();
+                }
+            }
+        }
+
+        public ControllerSimpleHostRoutingFilter(ProxyRequestHelper helper, ZuulProperties properties,
+                                       ApacheHttpClientConnectionManagerFactory connectionManagerFactory,
+                                       ApacheHttpClientFactory httpClientFactory) {
+            this.helper = helper;
+            this.hostProperties = properties.getHost();
+            this.sslHostnameValidationEnabled = properties.isSslHostnameValidationEnabled();
+            this.forceOriginalQueryStringEncoding = properties
+                    .isForceOriginalQueryStringEncoding();
+            this.connectionManagerFactory = connectionManagerFactory;
+            this.httpClientFactory = httpClientFactory;
+        }
+
+        public ControllerSimpleHostRoutingFilter(ProxyRequestHelper helper, ZuulProperties properties,
+                                       CloseableHttpClient httpClient) {
+            this.helper = helper;
+            this.hostProperties = properties.getHost();
+            this.sslHostnameValidationEnabled = properties.isSslHostnameValidationEnabled();
+            this.forceOriginalQueryStringEncoding = properties
+                    .isForceOriginalQueryStringEncoding();
+            this.httpClient = httpClient;
+            this.customHttpClient = true;
+        }
+
+    public ControllerSimpleHostRoutingFilter(ProxyRequestHelper helper, ZuulProperties properties) {
+        this.helper = helper;
+        this.hostProperties = properties.getHost();
+        this.sslHostnameValidationEnabled = properties.isSslHostnameValidationEnabled();
+        this.forceOriginalQueryStringEncoding = properties
+                .isForceOriginalQueryStringEncoding();
+        this.httpClient = newClient();
+        this.customHttpClient = true;
+    }
+
+    @PostConstruct
+        private void initialize() {
+            if(!customHttpClient) {
+                this.connectionManager = connectionManagerFactory.newConnectionManager(
+                        this.sslHostnameValidationEnabled,
+                        this.hostProperties.getMaxTotalConnections(),
+                        this.hostProperties.getMaxPerRouteConnections(),
+                        this.hostProperties.getTimeToLive(), this.hostProperties.getTimeUnit(),
+                        null);
+                this.httpClient = newClient();
+                this.connectionManagerTimer.schedule(new TimerTask() {
+                    @Override
+                    public void run() {
+                        if (ControllerSimpleHostRoutingFilter.this.connectionManager == null) {
+                            return;
+                        }
+                        ControllerSimpleHostRoutingFilter.this.connectionManager.closeExpiredConnections();
+                    }
+                }, 30000, 5000);
+            }
+        }
+
+        @PreDestroy
+        public void stop() {
+            this.connectionManagerTimer.cancel();
+        }
+
+        @Override
+        public String filterType() {
+            return ROUTE_TYPE;
+        }
+
+        @Override
+        public int filterOrder() {
+            return SIMPLE_HOST_ROUTING_FILTER_ORDER;
+        }
+
+        @Override
+        public boolean shouldFilter() {
+            return RequestContext.getCurrentContext().getRouteHost() != null
+                    && RequestContext.getCurrentContext().sendZuulResponse();
+        }
+
+        @Override
+        public Object run() {
+            RequestContext context = RequestContext.getCurrentContext();
+            HttpServletRequest request = context.getRequest();
+            MultiValueMap<String, String> headers = this.helper
+                    .buildZuulRequestHeaders(request);
+            MultiValueMap<String, String> params = this.helper
+                    .buildZuulRequestQueryParams(request);
+            String verb = getVerb(request);
+            InputStream requestEntity = getRequestBody(request);
+            if (request.getContentLength() < 0) {
+                context.setChunkedRequestBody();
+            }
+
+            String uri = this.helper.buildZuulRequestURI(request);
+            this.helper.addIgnoredHeaders();
+
+            try {
+                CloseableHttpResponse response = forward(this.httpClient, verb, uri, request,
+                                                         headers, params, requestEntity);
+                setResponse(response);
+            }
+            catch (Exception ex) {
+                throw new ZuulRuntimeException(ex);
+            }
+            return null;
+        }
+
+        protected HttpClientConnectionManager getConnectionManager() {
+            return connectionManager;
+        }
+
+        protected CloseableHttpClient newClient() {
+            final RequestConfig requestConfig = RequestConfig.custom()
+                                                             .setSocketTimeout(this.hostProperties.getSocketTimeoutMillis())
+                                                             .setConnectTimeout(this.hostProperties.getConnectTimeoutMillis())
+                                                             .setCookieSpec(CookieSpecs.IGNORE_COOKIES).build();
+            HttpClientBuilder builder = httpClientFactory.createBuilder();
+            if(redirectStrategy != null ) {
+                builder.setRedirectStrategy(redirectStrategy);
+            }
+            return builder.
+                    setDefaultRequestConfig(requestConfig).
+                                            setConnectionManager(this.connectionManager).disableRedirectHandling().build();
+        }
+
+        private CloseableHttpResponse forward(CloseableHttpClient httpclient, String verb,
+                                              String uri, HttpServletRequest request, MultiValueMap<String, String> headers,
+                                              MultiValueMap<String, String> params, InputStream requestEntity)
+                throws Exception {
+            Map<String, Object> info = this.helper.debug(verb, uri, headers, params,
+                                                         requestEntity);
+            URL host = RequestContext.getCurrentContext().getRouteHost();
+            HttpHost httpHost = getHttpHost(host);
+            uri = StringUtils.cleanPath((host.getPath() + uri).replaceAll("/{2,}", "/"));
+            int contentLength = request.getContentLength();
+
+            ContentType contentType = null;
+
+            if (request.getContentType() != null) {
+                contentType = ContentType.parse(request.getContentType());
+            }
+
+            InputStreamEntity entity = new InputStreamEntity(requestEntity, contentLength,
+                                                             contentType);
+
+            HttpRequest httpRequest = buildHttpRequest(verb, uri, entity, headers, params,
+                                                       request);
+            try {
+                log.debug(httpHost.getHostName() + " " + httpHost.getPort() + " "
+                                  + httpHost.getSchemeName());
+                CloseableHttpResponse zuulResponse = forwardRequest(httpclient, httpHost,
+                                                                    httpRequest);
+                this.helper.appendDebug(info, zuulResponse.getStatusLine().getStatusCode(),
+                                        revertHeaders(zuulResponse.getAllHeaders()));
+                return zuulResponse;
+            }
+            finally {
+                // When HttpClient instance is no longer needed,
+                // shut down the connection manager to ensure
+                // immediate deallocation of all system resources
+                // httpclient.getConnectionManager().shutdown();
+            }
+        }
+
+        protected HttpRequest buildHttpRequest(String verb, String uri,
+                                               InputStreamEntity entity, MultiValueMap<String, String> headers,
+                                               MultiValueMap<String, String> params, HttpServletRequest request) {
+            HttpRequest httpRequest;
+            String uriWithQueryString = uri + (this.forceOriginalQueryStringEncoding
+                    ? getEncodedQueryString(request) : this.helper.getQueryString(params));
+
+            switch (verb.toUpperCase()) {
+                case "POST":
+                    HttpPost httpPost = new HttpPost(uriWithQueryString);
+                    httpRequest = httpPost;
+                    httpPost.setEntity(entity);
+                    break;
+                case "PUT":
+                    HttpPut httpPut = new HttpPut(uriWithQueryString);
+                    httpRequest = httpPut;
+                    httpPut.setEntity(entity);
+                    break;
+                case "PATCH":
+                    HttpPatch httpPatch = new HttpPatch(uriWithQueryString);
+                    httpRequest = httpPatch;
+                    httpPatch.setEntity(entity);
+                    break;
+                case "DELETE":
+                    BasicHttpEntityEnclosingRequest entityRequest = new BasicHttpEntityEnclosingRequest(
+                            verb, uriWithQueryString);
+                    httpRequest = entityRequest;
+                    entityRequest.setEntity(entity);
+                    break;
+                default:
+                    httpRequest = new BasicHttpRequest(verb, uriWithQueryString);
+                    log.debug(uriWithQueryString);
+            }
+
+            httpRequest.setHeaders(convertHeaders(headers));
+            return httpRequest;
+        }
+
+        private String getEncodedQueryString(HttpServletRequest request) {
+            String query = request.getQueryString();
+            return (query != null) ? "?" + query : "";
+        }
+
+        private MultiValueMap<String, String> revertHeaders(Header[] headers) {
+            MultiValueMap<String, String> map = new LinkedMultiValueMap<String, String>();
+            for (Header header : headers) {
+                String name = header.getName();
+                if (!map.containsKey(name)) {
+                    map.put(name, new ArrayList<String>());
+                }
+                map.get(name).add(header.getValue());
+            }
+            return map;
+        }
+
+        private Header[] convertHeaders(MultiValueMap<String, String> headers) {
+            List<Header> list = new ArrayList<>();
+            for (String name : headers.keySet()) {
+                for (String value : headers.get(name)) {
+                    list.add(new BasicHeader(name, value));
+                }
+            }
+            return list.toArray(new BasicHeader[0]);
+        }
+
+        private CloseableHttpResponse forwardRequest(CloseableHttpClient httpclient,
+                                                     HttpHost httpHost, HttpRequest httpRequest) throws IOException {
+            return httpclient.execute(httpHost, httpRequest);
+        }
+
+        private HttpHost getHttpHost(URL host) {
+            HttpHost httpHost = new HttpHost(host.getHost(), host.getPort(),
+                                             host.getProtocol());
+            return httpHost;
+        }
+
+        protected InputStream getRequestBody(HttpServletRequest request) {
+            InputStream requestEntity = null;
+            try {
+                requestEntity = (InputStream) RequestContext.getCurrentContext().get(REQUEST_ENTITY_KEY);
+                if (requestEntity == null) {
+                    requestEntity = request.getInputStream();
+                }
+            }
+            catch (IOException ex) {
+                log.error("error during getRequestBody", ex);
+            }
+            return requestEntity;
+        }
+
+        private String getVerb(HttpServletRequest request) {
+            String sMethod = request.getMethod();
+            return sMethod.toUpperCase();
+        }
+
+        private void setResponse(HttpResponse response) throws IOException {
+            RequestContext.getCurrentContext().set("zuulResponse", response);
+            this.helper.setResponse(response.getStatusLine().getStatusCode(),
+                                    response.getEntity() == null ? null : response.getEntity().getContent(),
+                                    revertHeaders(response.getAllHeaders()));
+        }
+
+        /**
+         * Add header names to exclude from proxied response in the current request.
+         * @param names
+         */
+        protected void addIgnoredHeaders(String... names) {
+            this.helper.addIgnoredHeaders(names);
+        }
+
+        /**
+         * Determines whether the filter enables the validation for ssl hostnames.
+         * @return true if enabled
+         */
+        boolean isSslHostnameValidationEnabled() {
+            return this.sslHostnameValidationEnabled;
+        }
+    }
\ No newline at end of file
